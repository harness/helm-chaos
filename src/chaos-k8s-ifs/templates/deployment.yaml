apiVersion: apps/v1
kind: Deployment
metadata:
  name: chaos-k8s-ifs
  namespace: {{ .Release.Namespace }}
  labels:
    component: chaos-k8s-ifs
    app: chaos-k8s-ifs
    {{- include "chaos-k8s-ifs.labels" . | nindent 4 }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: {{ .Values.maxSurge }}
      maxUnavailable: {{ .Values.maxUnavailable }}
  selector:
    matchLabels:
      component: chaos-k8s-ifs
      app: chaos-k8s-ifs
      {{- include "chaos-k8s-ifs.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        component: chaos-k8s-ifs
        app: chaos-k8s-ifs
        {{- include "chaos-k8s-ifs.selectorLabels" . | nindent 8 }}
    spec:
      {{ include "chaos-k8s-ifs.pullSecrets" . | nindent 6 }}
      securityContext:
        fsGroup: 2000
      serviceAccountName: {{ include "chaos-k8s-ifs.serviceAccountName" . }}
   
      initContainers:
      - name: wait-for-mongo
        image: {{ include "common.images.image" (dict "imageRoot" .Values.waitForInitContainer.image "global" .Values.global) }}
        imagePullPolicy: IfNotPresent
        args:
          - "pod"
          - "-lapp=mongodb-replicaset"
      #volumes:
      #- name: service-account
      #  secret:
      #    secretName: chaos-redis-ca-truststore
      #    items:
      #      - key: redis-labs-ca-truststore
      #        path: redis_labs_ca_truststore
      #    defaultMode: 420
      containers:
        - name: chaos-k8s-ifs
          image: {{ include "common.images.image" (dict "imageRoot" .Values.image "global" .Values.global) }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          #volumeMounts:
          #- name: service-account
          #  mountPath: /opt/harness/svc
          {{- if .Values.lifecycleHooks }}
          lifecycle: {{- include "harnesscommon.tplvalues.render" (dict "value" .Values.lifecycleHooks "context" $) | nindent 12 }}
          {{- end }}
          {{- if .Values.extraVolumeMounts }}
          volumeMounts:
          {{- include "harnesscommon.tplvalues.render" (dict "value" .Values.extraVolumeMounts "context" $) | nindent 12 }}
          {{- end }}
          env:
            - name: DB_USER
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.mongoSecrets.userName.name }}
                  key: {{ .Values.mongoSecrets.userName.key }}
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.mongoSecrets.password.name }}
                  key: {{ .Values.mongoSecrets.password.key }}
            - name: MONGODB_USERNAME
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.mongoSecrets.userName.name }}
                  key: {{ .Values.mongoSecrets.userName.key }}
            - name: MONGODB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.mongoSecrets.password.name }}
                  key: {{ .Values.mongoSecrets.password.key }}
            - name: DB_SERVER
              value: {{ include "harnesscommon.database.mongo" (dict "database" "chaos-harness" "context" $) }}
          envFrom:
            - configMapRef:
                name: chaos-k8s-ifs-config
            - configMapRef:
                name: chaos-common-config
            - secretRef:
                name: chaos-common-secret
            - secretRef:
                name: chaos-k8s-ifs-secret        
          ports:
            - containerPort: {{.Values.service.port}}
          resources:
              {{- toYaml .Values.resources | nindent 12 }}
          livenessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - "ls server"
            initialDelaySeconds: 1
            periodSeconds: 5
          readinessProbe:
            httpGet:
              scheme: HTTP
              path: /status
              port: {{.Values.service.port}}
            initialDelaySeconds: 1
            periodSeconds: 5
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- if .Values.extraVolumes }}
      volumes:
      {{- include "harnesscommon.tplvalues.render" ( dict "value" .Values.extraVolumes "context" $ ) | nindent 8 }}
      {{- end }}